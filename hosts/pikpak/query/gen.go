// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q             = new(Query)
	DeleteQueue   *deleteQueue
	File          *file
	MasterAccount *masterAccount
	SharedLink    *sharedLink
	Token         *token
	WorkerAccount *workerAccount
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	DeleteQueue = &Q.DeleteQueue
	File = &Q.File
	MasterAccount = &Q.MasterAccount
	SharedLink = &Q.SharedLink
	Token = &Q.Token
	WorkerAccount = &Q.WorkerAccount
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:            db,
		DeleteQueue:   newDeleteQueue(db, opts...),
		File:          newFile(db, opts...),
		MasterAccount: newMasterAccount(db, opts...),
		SharedLink:    newSharedLink(db, opts...),
		Token:         newToken(db, opts...),
		WorkerAccount: newWorkerAccount(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	DeleteQueue   deleteQueue
	File          file
	MasterAccount masterAccount
	SharedLink    sharedLink
	Token         token
	WorkerAccount workerAccount
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		DeleteQueue:   q.DeleteQueue.clone(db),
		File:          q.File.clone(db),
		MasterAccount: q.MasterAccount.clone(db),
		SharedLink:    q.SharedLink.clone(db),
		Token:         q.Token.clone(db),
		WorkerAccount: q.WorkerAccount.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		DeleteQueue:   q.DeleteQueue.replaceDB(db),
		File:          q.File.replaceDB(db),
		MasterAccount: q.MasterAccount.replaceDB(db),
		SharedLink:    q.SharedLink.replaceDB(db),
		Token:         q.Token.replaceDB(db),
		WorkerAccount: q.WorkerAccount.replaceDB(db),
	}
}

type queryCtx struct {
	DeleteQueue   IDeleteQueueDo
	File          IFileDo
	MasterAccount IMasterAccountDo
	SharedLink    ISharedLinkDo
	Token         ITokenDo
	WorkerAccount IWorkerAccountDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		DeleteQueue:   q.DeleteQueue.WithContext(ctx),
		File:          q.File.WithContext(ctx),
		MasterAccount: q.MasterAccount.WithContext(ctx),
		SharedLink:    q.SharedLink.WithContext(ctx),
		Token:         q.Token.WithContext(ctx),
		WorkerAccount: q.WorkerAccount.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
