// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/KeepShareOrg/keepshare/hosts/pikpak/model"
)

func newDeleteQueue(db *gorm.DB, opts ...gen.DOOption) deleteQueue {
	_deleteQueue := deleteQueue{}

	_deleteQueue.deleteQueueDo.UseDB(db, opts...)
	_deleteQueue.deleteQueueDo.UseModel(&model.DeleteQueue{})

	tableName := _deleteQueue.deleteQueueDo.TableName()
	_deleteQueue.ALL = field.NewAsterisk(tableName)
	_deleteQueue.WorkerUserID = field.NewString(tableName, "worker_user_id")
	_deleteQueue.OriginalLinkHash = field.NewString(tableName, "original_link_hash")
	_deleteQueue.Status = field.NewString(tableName, "status")
	_deleteQueue.CreatedAt = field.NewTime(tableName, "created_at")
	_deleteQueue.NextTrigger = field.NewTime(tableName, "next_trigger")
	_deleteQueue.Ext = field.NewString(tableName, "ext")

	_deleteQueue.fillFieldMap()

	return _deleteQueue
}

type deleteQueue struct {
	deleteQueueDo

	ALL              field.Asterisk
	WorkerUserID     field.String
	OriginalLinkHash field.String
	Status           field.String
	CreatedAt        field.Time
	NextTrigger      field.Time
	Ext              field.String

	fieldMap map[string]field.Expr
}

func (d deleteQueue) Table(newTableName string) *deleteQueue {
	d.deleteQueueDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d deleteQueue) As(alias string) *deleteQueue {
	d.deleteQueueDo.DO = *(d.deleteQueueDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *deleteQueue) updateTableName(table string) *deleteQueue {
	d.ALL = field.NewAsterisk(table)
	d.WorkerUserID = field.NewString(table, "worker_user_id")
	d.OriginalLinkHash = field.NewString(table, "original_link_hash")
	d.Status = field.NewString(table, "status")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.NextTrigger = field.NewTime(table, "next_trigger")
	d.Ext = field.NewString(table, "ext")

	d.fillFieldMap()

	return d
}

func (d *deleteQueue) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *deleteQueue) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 6)
	d.fieldMap["worker_user_id"] = d.WorkerUserID
	d.fieldMap["original_link_hash"] = d.OriginalLinkHash
	d.fieldMap["status"] = d.Status
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["next_trigger"] = d.NextTrigger
	d.fieldMap["ext"] = d.Ext
}

func (d deleteQueue) clone(db *gorm.DB) deleteQueue {
	d.deleteQueueDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d deleteQueue) replaceDB(db *gorm.DB) deleteQueue {
	d.deleteQueueDo.ReplaceDB(db)
	return d
}

type deleteQueueDo struct{ gen.DO }

type IDeleteQueueDo interface {
	gen.SubQuery
	Debug() IDeleteQueueDo
	WithContext(ctx context.Context) IDeleteQueueDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDeleteQueueDo
	WriteDB() IDeleteQueueDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDeleteQueueDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDeleteQueueDo
	Not(conds ...gen.Condition) IDeleteQueueDo
	Or(conds ...gen.Condition) IDeleteQueueDo
	Select(conds ...field.Expr) IDeleteQueueDo
	Where(conds ...gen.Condition) IDeleteQueueDo
	Order(conds ...field.Expr) IDeleteQueueDo
	Distinct(cols ...field.Expr) IDeleteQueueDo
	Omit(cols ...field.Expr) IDeleteQueueDo
	Join(table schema.Tabler, on ...field.Expr) IDeleteQueueDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDeleteQueueDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDeleteQueueDo
	Group(cols ...field.Expr) IDeleteQueueDo
	Having(conds ...gen.Condition) IDeleteQueueDo
	Limit(limit int) IDeleteQueueDo
	Offset(offset int) IDeleteQueueDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDeleteQueueDo
	Unscoped() IDeleteQueueDo
	Create(values ...*model.DeleteQueue) error
	CreateInBatches(values []*model.DeleteQueue, batchSize int) error
	Save(values ...*model.DeleteQueue) error
	First() (*model.DeleteQueue, error)
	Take() (*model.DeleteQueue, error)
	Last() (*model.DeleteQueue, error)
	Find() ([]*model.DeleteQueue, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeleteQueue, err error)
	FindInBatches(result *[]*model.DeleteQueue, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DeleteQueue) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDeleteQueueDo
	Assign(attrs ...field.AssignExpr) IDeleteQueueDo
	Joins(fields ...field.RelationField) IDeleteQueueDo
	Preload(fields ...field.RelationField) IDeleteQueueDo
	FirstOrInit() (*model.DeleteQueue, error)
	FirstOrCreate() (*model.DeleteQueue, error)
	FindByPage(offset int, limit int) (result []*model.DeleteQueue, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDeleteQueueDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d deleteQueueDo) Debug() IDeleteQueueDo {
	return d.withDO(d.DO.Debug())
}

func (d deleteQueueDo) WithContext(ctx context.Context) IDeleteQueueDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d deleteQueueDo) ReadDB() IDeleteQueueDo {
	return d.Clauses(dbresolver.Read)
}

func (d deleteQueueDo) WriteDB() IDeleteQueueDo {
	return d.Clauses(dbresolver.Write)
}

func (d deleteQueueDo) Session(config *gorm.Session) IDeleteQueueDo {
	return d.withDO(d.DO.Session(config))
}

func (d deleteQueueDo) Clauses(conds ...clause.Expression) IDeleteQueueDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d deleteQueueDo) Returning(value interface{}, columns ...string) IDeleteQueueDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d deleteQueueDo) Not(conds ...gen.Condition) IDeleteQueueDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d deleteQueueDo) Or(conds ...gen.Condition) IDeleteQueueDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d deleteQueueDo) Select(conds ...field.Expr) IDeleteQueueDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d deleteQueueDo) Where(conds ...gen.Condition) IDeleteQueueDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d deleteQueueDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDeleteQueueDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d deleteQueueDo) Order(conds ...field.Expr) IDeleteQueueDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d deleteQueueDo) Distinct(cols ...field.Expr) IDeleteQueueDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d deleteQueueDo) Omit(cols ...field.Expr) IDeleteQueueDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d deleteQueueDo) Join(table schema.Tabler, on ...field.Expr) IDeleteQueueDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d deleteQueueDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDeleteQueueDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d deleteQueueDo) RightJoin(table schema.Tabler, on ...field.Expr) IDeleteQueueDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d deleteQueueDo) Group(cols ...field.Expr) IDeleteQueueDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d deleteQueueDo) Having(conds ...gen.Condition) IDeleteQueueDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d deleteQueueDo) Limit(limit int) IDeleteQueueDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d deleteQueueDo) Offset(offset int) IDeleteQueueDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d deleteQueueDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDeleteQueueDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d deleteQueueDo) Unscoped() IDeleteQueueDo {
	return d.withDO(d.DO.Unscoped())
}

func (d deleteQueueDo) Create(values ...*model.DeleteQueue) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d deleteQueueDo) CreateInBatches(values []*model.DeleteQueue, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d deleteQueueDo) Save(values ...*model.DeleteQueue) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d deleteQueueDo) First() (*model.DeleteQueue, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeleteQueue), nil
	}
}

func (d deleteQueueDo) Take() (*model.DeleteQueue, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeleteQueue), nil
	}
}

func (d deleteQueueDo) Last() (*model.DeleteQueue, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeleteQueue), nil
	}
}

func (d deleteQueueDo) Find() ([]*model.DeleteQueue, error) {
	result, err := d.DO.Find()
	return result.([]*model.DeleteQueue), err
}

func (d deleteQueueDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeleteQueue, err error) {
	buf := make([]*model.DeleteQueue, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d deleteQueueDo) FindInBatches(result *[]*model.DeleteQueue, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d deleteQueueDo) Attrs(attrs ...field.AssignExpr) IDeleteQueueDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d deleteQueueDo) Assign(attrs ...field.AssignExpr) IDeleteQueueDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d deleteQueueDo) Joins(fields ...field.RelationField) IDeleteQueueDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d deleteQueueDo) Preload(fields ...field.RelationField) IDeleteQueueDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d deleteQueueDo) FirstOrInit() (*model.DeleteQueue, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeleteQueue), nil
	}
}

func (d deleteQueueDo) FirstOrCreate() (*model.DeleteQueue, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeleteQueue), nil
	}
}

func (d deleteQueueDo) FindByPage(offset int, limit int) (result []*model.DeleteQueue, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d deleteQueueDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d deleteQueueDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d deleteQueueDo) Delete(models ...*model.DeleteQueue) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *deleteQueueDo) withDO(do gen.Dao) *deleteQueueDo {
	d.DO = *do.(*gen.DO)
	return d
}
