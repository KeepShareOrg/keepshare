// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/KeepShareOrg/keepshare/hosts/pikpak/model"
)

func newRedeemCode(db *gorm.DB, opts ...gen.DOOption) redeemCode {
	_redeemCode := redeemCode{}

	_redeemCode.redeemCodeDo.UseDB(db, opts...)
	_redeemCode.redeemCodeDo.UseModel(&model.RedeemCode{})

	tableName := _redeemCode.redeemCodeDo.TableName()
	_redeemCode.ALL = field.NewAsterisk(tableName)
	_redeemCode.AutoID = field.NewInt64(tableName, "auto_id")
	_redeemCode.Code = field.NewString(tableName, "code")
	_redeemCode.Status = field.NewString(tableName, "status")
	_redeemCode.UsedUserID = field.NewString(tableName, "used_user_id")
	_redeemCode.CreatedAt = field.NewTime(tableName, "created_at")
	_redeemCode.UpdatedAt = field.NewTime(tableName, "updated_at")
	_redeemCode.Error = field.NewString(tableName, "error")

	_redeemCode.fillFieldMap()

	return _redeemCode
}

type redeemCode struct {
	redeemCodeDo

	ALL        field.Asterisk
	AutoID     field.Int64
	Code       field.String
	Status     field.String // NOT_USED, USED, INVALID
	UsedUserID field.String
	CreatedAt  field.Time
	UpdatedAt  field.Time
	Error      field.String

	fieldMap map[string]field.Expr
}

func (r redeemCode) Table(newTableName string) *redeemCode {
	r.redeemCodeDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r redeemCode) As(alias string) *redeemCode {
	r.redeemCodeDo.DO = *(r.redeemCodeDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *redeemCode) updateTableName(table string) *redeemCode {
	r.ALL = field.NewAsterisk(table)
	r.AutoID = field.NewInt64(table, "auto_id")
	r.Code = field.NewString(table, "code")
	r.Status = field.NewString(table, "status")
	r.UsedUserID = field.NewString(table, "used_user_id")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.Error = field.NewString(table, "error")

	r.fillFieldMap()

	return r
}

func (r *redeemCode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *redeemCode) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 7)
	r.fieldMap["auto_id"] = r.AutoID
	r.fieldMap["code"] = r.Code
	r.fieldMap["status"] = r.Status
	r.fieldMap["used_user_id"] = r.UsedUserID
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["error"] = r.Error
}

func (r redeemCode) clone(db *gorm.DB) redeemCode {
	r.redeemCodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r redeemCode) replaceDB(db *gorm.DB) redeemCode {
	r.redeemCodeDo.ReplaceDB(db)
	return r
}

type redeemCodeDo struct{ gen.DO }

type IRedeemCodeDo interface {
	gen.SubQuery
	Debug() IRedeemCodeDo
	WithContext(ctx context.Context) IRedeemCodeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRedeemCodeDo
	WriteDB() IRedeemCodeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRedeemCodeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRedeemCodeDo
	Not(conds ...gen.Condition) IRedeemCodeDo
	Or(conds ...gen.Condition) IRedeemCodeDo
	Select(conds ...field.Expr) IRedeemCodeDo
	Where(conds ...gen.Condition) IRedeemCodeDo
	Order(conds ...field.Expr) IRedeemCodeDo
	Distinct(cols ...field.Expr) IRedeemCodeDo
	Omit(cols ...field.Expr) IRedeemCodeDo
	Join(table schema.Tabler, on ...field.Expr) IRedeemCodeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRedeemCodeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRedeemCodeDo
	Group(cols ...field.Expr) IRedeemCodeDo
	Having(conds ...gen.Condition) IRedeemCodeDo
	Limit(limit int) IRedeemCodeDo
	Offset(offset int) IRedeemCodeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRedeemCodeDo
	Unscoped() IRedeemCodeDo
	Create(values ...*model.RedeemCode) error
	CreateInBatches(values []*model.RedeemCode, batchSize int) error
	Save(values ...*model.RedeemCode) error
	First() (*model.RedeemCode, error)
	Take() (*model.RedeemCode, error)
	Last() (*model.RedeemCode, error)
	Find() ([]*model.RedeemCode, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RedeemCode, err error)
	FindInBatches(result *[]*model.RedeemCode, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RedeemCode) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRedeemCodeDo
	Assign(attrs ...field.AssignExpr) IRedeemCodeDo
	Joins(fields ...field.RelationField) IRedeemCodeDo
	Preload(fields ...field.RelationField) IRedeemCodeDo
	FirstOrInit() (*model.RedeemCode, error)
	FirstOrCreate() (*model.RedeemCode, error)
	FindByPage(offset int, limit int) (result []*model.RedeemCode, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRedeemCodeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r redeemCodeDo) Debug() IRedeemCodeDo {
	return r.withDO(r.DO.Debug())
}

func (r redeemCodeDo) WithContext(ctx context.Context) IRedeemCodeDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r redeemCodeDo) ReadDB() IRedeemCodeDo {
	return r.Clauses(dbresolver.Read)
}

func (r redeemCodeDo) WriteDB() IRedeemCodeDo {
	return r.Clauses(dbresolver.Write)
}

func (r redeemCodeDo) Session(config *gorm.Session) IRedeemCodeDo {
	return r.withDO(r.DO.Session(config))
}

func (r redeemCodeDo) Clauses(conds ...clause.Expression) IRedeemCodeDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r redeemCodeDo) Returning(value interface{}, columns ...string) IRedeemCodeDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r redeemCodeDo) Not(conds ...gen.Condition) IRedeemCodeDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r redeemCodeDo) Or(conds ...gen.Condition) IRedeemCodeDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r redeemCodeDo) Select(conds ...field.Expr) IRedeemCodeDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r redeemCodeDo) Where(conds ...gen.Condition) IRedeemCodeDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r redeemCodeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IRedeemCodeDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r redeemCodeDo) Order(conds ...field.Expr) IRedeemCodeDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r redeemCodeDo) Distinct(cols ...field.Expr) IRedeemCodeDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r redeemCodeDo) Omit(cols ...field.Expr) IRedeemCodeDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r redeemCodeDo) Join(table schema.Tabler, on ...field.Expr) IRedeemCodeDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r redeemCodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRedeemCodeDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r redeemCodeDo) RightJoin(table schema.Tabler, on ...field.Expr) IRedeemCodeDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r redeemCodeDo) Group(cols ...field.Expr) IRedeemCodeDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r redeemCodeDo) Having(conds ...gen.Condition) IRedeemCodeDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r redeemCodeDo) Limit(limit int) IRedeemCodeDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r redeemCodeDo) Offset(offset int) IRedeemCodeDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r redeemCodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRedeemCodeDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r redeemCodeDo) Unscoped() IRedeemCodeDo {
	return r.withDO(r.DO.Unscoped())
}

func (r redeemCodeDo) Create(values ...*model.RedeemCode) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r redeemCodeDo) CreateInBatches(values []*model.RedeemCode, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r redeemCodeDo) Save(values ...*model.RedeemCode) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r redeemCodeDo) First() (*model.RedeemCode, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RedeemCode), nil
	}
}

func (r redeemCodeDo) Take() (*model.RedeemCode, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RedeemCode), nil
	}
}

func (r redeemCodeDo) Last() (*model.RedeemCode, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RedeemCode), nil
	}
}

func (r redeemCodeDo) Find() ([]*model.RedeemCode, error) {
	result, err := r.DO.Find()
	return result.([]*model.RedeemCode), err
}

func (r redeemCodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RedeemCode, err error) {
	buf := make([]*model.RedeemCode, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r redeemCodeDo) FindInBatches(result *[]*model.RedeemCode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r redeemCodeDo) Attrs(attrs ...field.AssignExpr) IRedeemCodeDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r redeemCodeDo) Assign(attrs ...field.AssignExpr) IRedeemCodeDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r redeemCodeDo) Joins(fields ...field.RelationField) IRedeemCodeDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r redeemCodeDo) Preload(fields ...field.RelationField) IRedeemCodeDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r redeemCodeDo) FirstOrInit() (*model.RedeemCode, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RedeemCode), nil
	}
}

func (r redeemCodeDo) FirstOrCreate() (*model.RedeemCode, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RedeemCode), nil
	}
}

func (r redeemCodeDo) FindByPage(offset int, limit int) (result []*model.RedeemCode, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r redeemCodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r redeemCodeDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r redeemCodeDo) Delete(models ...*model.RedeemCode) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *redeemCodeDo) withDO(do gen.Dao) *redeemCodeDo {
	r.DO = *do.(*gen.DO)
	return r
}
