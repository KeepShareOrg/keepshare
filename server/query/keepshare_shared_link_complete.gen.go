// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/KeepShareOrg/keepshare/server/model"
)

func newSharedLinkComplete(db *gorm.DB, opts ...gen.DOOption) sharedLinkComplete {
	_sharedLinkComplete := sharedLinkComplete{}

	_sharedLinkComplete.sharedLinkCompleteDo.UseDB(db, opts...)
	_sharedLinkComplete.sharedLinkCompleteDo.UseModel(&model.SharedLinkComplete{})

	tableName := _sharedLinkComplete.sharedLinkCompleteDo.TableName()
	_sharedLinkComplete.ALL = field.NewAsterisk(tableName)
	_sharedLinkComplete.AutoID = field.NewInt64(tableName, "auto_id")
	_sharedLinkComplete.UserID = field.NewString(tableName, "user_id")
	_sharedLinkComplete.State = field.NewString(tableName, "state")
	_sharedLinkComplete.Host = field.NewString(tableName, "host")
	_sharedLinkComplete.CreatedBy = field.NewString(tableName, "created_by")
	_sharedLinkComplete.CreatedAt = field.NewTime(tableName, "created_at")
	_sharedLinkComplete.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sharedLinkComplete.Size = field.NewInt64(tableName, "size")
	_sharedLinkComplete.Visitor = field.NewInt32(tableName, "visitor")
	_sharedLinkComplete.Stored = field.NewInt32(tableName, "stored")
	_sharedLinkComplete.FirstVisitedAt = field.NewTime(tableName, "first_visited_at")
	_sharedLinkComplete.LastVisitedAt = field.NewTime(tableName, "last_visited_at")
	_sharedLinkComplete.LastStoredAt = field.NewTime(tableName, "last_stored_at")
	_sharedLinkComplete.Revenue = field.NewInt64(tableName, "revenue")
	_sharedLinkComplete.Title = field.NewString(tableName, "title")
	_sharedLinkComplete.OriginalLinkHash = field.NewString(tableName, "original_link_hash")
	_sharedLinkComplete.HostSharedLinkHash = field.NewString(tableName, "host_shared_link_hash")
	_sharedLinkComplete.OriginalLink = field.NewString(tableName, "original_link")
	_sharedLinkComplete.HostSharedLink = field.NewString(tableName, "host_shared_link")
	_sharedLinkComplete.Error = field.NewString(tableName, "error")

	_sharedLinkComplete.fillFieldMap()

	return _sharedLinkComplete
}

type sharedLinkComplete struct {
	sharedLinkCompleteDo

	ALL                field.Asterisk
	AutoID             field.Int64
	UserID             field.String
	State              field.String
	Host               field.String
	CreatedBy          field.String
	CreatedAt          field.Time
	UpdatedAt          field.Time
	Size               field.Int64
	Visitor            field.Int32
	Stored             field.Int32
	FirstVisitedAt     field.Time
	LastVisitedAt      field.Time
	LastStoredAt       field.Time
	Revenue            field.Int64
	Title              field.String
	OriginalLinkHash   field.String
	HostSharedLinkHash field.String
	OriginalLink       field.String
	HostSharedLink     field.String
	Error              field.String

	fieldMap map[string]field.Expr
}

func (s sharedLinkComplete) Table(newTableName string) *sharedLinkComplete {
	s.sharedLinkCompleteDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sharedLinkComplete) As(alias string) *sharedLinkComplete {
	s.sharedLinkCompleteDo.DO = *(s.sharedLinkCompleteDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sharedLinkComplete) updateTableName(table string) *sharedLinkComplete {
	s.ALL = field.NewAsterisk(table)
	s.AutoID = field.NewInt64(table, "auto_id")
	s.UserID = field.NewString(table, "user_id")
	s.State = field.NewString(table, "state")
	s.Host = field.NewString(table, "host")
	s.CreatedBy = field.NewString(table, "created_by")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.Size = field.NewInt64(table, "size")
	s.Visitor = field.NewInt32(table, "visitor")
	s.Stored = field.NewInt32(table, "stored")
	s.FirstVisitedAt = field.NewTime(table, "first_visited_at")
	s.LastVisitedAt = field.NewTime(table, "last_visited_at")
	s.LastStoredAt = field.NewTime(table, "last_stored_at")
	s.Revenue = field.NewInt64(table, "revenue")
	s.Title = field.NewString(table, "title")
	s.OriginalLinkHash = field.NewString(table, "original_link_hash")
	s.HostSharedLinkHash = field.NewString(table, "host_shared_link_hash")
	s.OriginalLink = field.NewString(table, "original_link")
	s.HostSharedLink = field.NewString(table, "host_shared_link")
	s.Error = field.NewString(table, "error")

	s.fillFieldMap()

	return s
}

func (s *sharedLinkComplete) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sharedLinkComplete) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 20)
	s.fieldMap["auto_id"] = s.AutoID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["state"] = s.State
	s.fieldMap["host"] = s.Host
	s.fieldMap["created_by"] = s.CreatedBy
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["size"] = s.Size
	s.fieldMap["visitor"] = s.Visitor
	s.fieldMap["stored"] = s.Stored
	s.fieldMap["first_visited_at"] = s.FirstVisitedAt
	s.fieldMap["last_visited_at"] = s.LastVisitedAt
	s.fieldMap["last_stored_at"] = s.LastStoredAt
	s.fieldMap["revenue"] = s.Revenue
	s.fieldMap["title"] = s.Title
	s.fieldMap["original_link_hash"] = s.OriginalLinkHash
	s.fieldMap["host_shared_link_hash"] = s.HostSharedLinkHash
	s.fieldMap["original_link"] = s.OriginalLink
	s.fieldMap["host_shared_link"] = s.HostSharedLink
	s.fieldMap["error"] = s.Error
}

func (s sharedLinkComplete) clone(db *gorm.DB) sharedLinkComplete {
	s.sharedLinkCompleteDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sharedLinkComplete) replaceDB(db *gorm.DB) sharedLinkComplete {
	s.sharedLinkCompleteDo.ReplaceDB(db)
	return s
}

type sharedLinkCompleteDo struct{ gen.DO }

type ISharedLinkCompleteDo interface {
	gen.SubQuery
	Debug() ISharedLinkCompleteDo
	WithContext(ctx context.Context) ISharedLinkCompleteDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISharedLinkCompleteDo
	WriteDB() ISharedLinkCompleteDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISharedLinkCompleteDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISharedLinkCompleteDo
	Not(conds ...gen.Condition) ISharedLinkCompleteDo
	Or(conds ...gen.Condition) ISharedLinkCompleteDo
	Select(conds ...field.Expr) ISharedLinkCompleteDo
	Where(conds ...gen.Condition) ISharedLinkCompleteDo
	Order(conds ...field.Expr) ISharedLinkCompleteDo
	Distinct(cols ...field.Expr) ISharedLinkCompleteDo
	Omit(cols ...field.Expr) ISharedLinkCompleteDo
	Join(table schema.Tabler, on ...field.Expr) ISharedLinkCompleteDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISharedLinkCompleteDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISharedLinkCompleteDo
	Group(cols ...field.Expr) ISharedLinkCompleteDo
	Having(conds ...gen.Condition) ISharedLinkCompleteDo
	Limit(limit int) ISharedLinkCompleteDo
	Offset(offset int) ISharedLinkCompleteDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISharedLinkCompleteDo
	Unscoped() ISharedLinkCompleteDo
	Create(values ...*model.SharedLinkComplete) error
	CreateInBatches(values []*model.SharedLinkComplete, batchSize int) error
	Save(values ...*model.SharedLinkComplete) error
	First() (*model.SharedLinkComplete, error)
	Take() (*model.SharedLinkComplete, error)
	Last() (*model.SharedLinkComplete, error)
	Find() ([]*model.SharedLinkComplete, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SharedLinkComplete, err error)
	FindInBatches(result *[]*model.SharedLinkComplete, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SharedLinkComplete) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISharedLinkCompleteDo
	Assign(attrs ...field.AssignExpr) ISharedLinkCompleteDo
	Joins(fields ...field.RelationField) ISharedLinkCompleteDo
	Preload(fields ...field.RelationField) ISharedLinkCompleteDo
	FirstOrInit() (*model.SharedLinkComplete, error)
	FirstOrCreate() (*model.SharedLinkComplete, error)
	FindByPage(offset int, limit int) (result []*model.SharedLinkComplete, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISharedLinkCompleteDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sharedLinkCompleteDo) Debug() ISharedLinkCompleteDo {
	return s.withDO(s.DO.Debug())
}

func (s sharedLinkCompleteDo) WithContext(ctx context.Context) ISharedLinkCompleteDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sharedLinkCompleteDo) ReadDB() ISharedLinkCompleteDo {
	return s.Clauses(dbresolver.Read)
}

func (s sharedLinkCompleteDo) WriteDB() ISharedLinkCompleteDo {
	return s.Clauses(dbresolver.Write)
}

func (s sharedLinkCompleteDo) Session(config *gorm.Session) ISharedLinkCompleteDo {
	return s.withDO(s.DO.Session(config))
}

func (s sharedLinkCompleteDo) Clauses(conds ...clause.Expression) ISharedLinkCompleteDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sharedLinkCompleteDo) Returning(value interface{}, columns ...string) ISharedLinkCompleteDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sharedLinkCompleteDo) Not(conds ...gen.Condition) ISharedLinkCompleteDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sharedLinkCompleteDo) Or(conds ...gen.Condition) ISharedLinkCompleteDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sharedLinkCompleteDo) Select(conds ...field.Expr) ISharedLinkCompleteDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sharedLinkCompleteDo) Where(conds ...gen.Condition) ISharedLinkCompleteDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sharedLinkCompleteDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ISharedLinkCompleteDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sharedLinkCompleteDo) Order(conds ...field.Expr) ISharedLinkCompleteDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sharedLinkCompleteDo) Distinct(cols ...field.Expr) ISharedLinkCompleteDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sharedLinkCompleteDo) Omit(cols ...field.Expr) ISharedLinkCompleteDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sharedLinkCompleteDo) Join(table schema.Tabler, on ...field.Expr) ISharedLinkCompleteDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sharedLinkCompleteDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISharedLinkCompleteDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sharedLinkCompleteDo) RightJoin(table schema.Tabler, on ...field.Expr) ISharedLinkCompleteDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sharedLinkCompleteDo) Group(cols ...field.Expr) ISharedLinkCompleteDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sharedLinkCompleteDo) Having(conds ...gen.Condition) ISharedLinkCompleteDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sharedLinkCompleteDo) Limit(limit int) ISharedLinkCompleteDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sharedLinkCompleteDo) Offset(offset int) ISharedLinkCompleteDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sharedLinkCompleteDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISharedLinkCompleteDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sharedLinkCompleteDo) Unscoped() ISharedLinkCompleteDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sharedLinkCompleteDo) Create(values ...*model.SharedLinkComplete) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sharedLinkCompleteDo) CreateInBatches(values []*model.SharedLinkComplete, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sharedLinkCompleteDo) Save(values ...*model.SharedLinkComplete) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sharedLinkCompleteDo) First() (*model.SharedLinkComplete, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SharedLinkComplete), nil
	}
}

func (s sharedLinkCompleteDo) Take() (*model.SharedLinkComplete, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SharedLinkComplete), nil
	}
}

func (s sharedLinkCompleteDo) Last() (*model.SharedLinkComplete, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SharedLinkComplete), nil
	}
}

func (s sharedLinkCompleteDo) Find() ([]*model.SharedLinkComplete, error) {
	result, err := s.DO.Find()
	return result.([]*model.SharedLinkComplete), err
}

func (s sharedLinkCompleteDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SharedLinkComplete, err error) {
	buf := make([]*model.SharedLinkComplete, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sharedLinkCompleteDo) FindInBatches(result *[]*model.SharedLinkComplete, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sharedLinkCompleteDo) Attrs(attrs ...field.AssignExpr) ISharedLinkCompleteDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sharedLinkCompleteDo) Assign(attrs ...field.AssignExpr) ISharedLinkCompleteDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sharedLinkCompleteDo) Joins(fields ...field.RelationField) ISharedLinkCompleteDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sharedLinkCompleteDo) Preload(fields ...field.RelationField) ISharedLinkCompleteDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sharedLinkCompleteDo) FirstOrInit() (*model.SharedLinkComplete, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SharedLinkComplete), nil
	}
}

func (s sharedLinkCompleteDo) FirstOrCreate() (*model.SharedLinkComplete, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SharedLinkComplete), nil
	}
}

func (s sharedLinkCompleteDo) FindByPage(offset int, limit int) (result []*model.SharedLinkComplete, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sharedLinkCompleteDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sharedLinkCompleteDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sharedLinkCompleteDo) Delete(models ...*model.SharedLinkComplete) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sharedLinkCompleteDo) withDO(do gen.Dao) *sharedLinkCompleteDo {
	s.DO = *do.(*gen.DO)
	return s
}
