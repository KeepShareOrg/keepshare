// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/KeepShareOrg/keepshare/hosts/pikpak/model"
)

func newMasterAccount(db *gorm.DB, opts ...gen.DOOption) masterAccount {
	_masterAccount := masterAccount{}

	_masterAccount.masterAccountDo.UseDB(db, opts...)
	_masterAccount.masterAccountDo.UseModel(&model.MasterAccount{})

	tableName := _masterAccount.masterAccountDo.TableName()
	_masterAccount.ALL = field.NewAsterisk(tableName)
	_masterAccount.UserID = field.NewString(tableName, "user_id")
	_masterAccount.KeepshareUserID = field.NewString(tableName, "keepshare_user_id")
	_masterAccount.Email = field.NewString(tableName, "email")
	_masterAccount.Password = field.NewString(tableName, "password")
	_masterAccount.CreatedAt = field.NewTime(tableName, "created_at")
	_masterAccount.UpdatedAt = field.NewTime(tableName, "updated_at")

	_masterAccount.fillFieldMap()

	return _masterAccount
}

type masterAccount struct {
	masterAccountDo

	ALL             field.Asterisk
	UserID          field.String
	KeepshareUserID field.String
	Email           field.String
	Password        field.String
	CreatedAt       field.Time
	UpdatedAt       field.Time

	fieldMap map[string]field.Expr
}

func (m masterAccount) Table(newTableName string) *masterAccount {
	m.masterAccountDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m masterAccount) As(alias string) *masterAccount {
	m.masterAccountDo.DO = *(m.masterAccountDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *masterAccount) updateTableName(table string) *masterAccount {
	m.ALL = field.NewAsterisk(table)
	m.UserID = field.NewString(table, "user_id")
	m.KeepshareUserID = field.NewString(table, "keepshare_user_id")
	m.Email = field.NewString(table, "email")
	m.Password = field.NewString(table, "password")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")

	m.fillFieldMap()

	return m
}

func (m *masterAccount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *masterAccount) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 6)
	m.fieldMap["user_id"] = m.UserID
	m.fieldMap["keepshare_user_id"] = m.KeepshareUserID
	m.fieldMap["email"] = m.Email
	m.fieldMap["password"] = m.Password
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
}

func (m masterAccount) clone(db *gorm.DB) masterAccount {
	m.masterAccountDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m masterAccount) replaceDB(db *gorm.DB) masterAccount {
	m.masterAccountDo.ReplaceDB(db)
	return m
}

type masterAccountDo struct{ gen.DO }

type IMasterAccountDo interface {
	gen.SubQuery
	Debug() IMasterAccountDo
	WithContext(ctx context.Context) IMasterAccountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMasterAccountDo
	WriteDB() IMasterAccountDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMasterAccountDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMasterAccountDo
	Not(conds ...gen.Condition) IMasterAccountDo
	Or(conds ...gen.Condition) IMasterAccountDo
	Select(conds ...field.Expr) IMasterAccountDo
	Where(conds ...gen.Condition) IMasterAccountDo
	Order(conds ...field.Expr) IMasterAccountDo
	Distinct(cols ...field.Expr) IMasterAccountDo
	Omit(cols ...field.Expr) IMasterAccountDo
	Join(table schema.Tabler, on ...field.Expr) IMasterAccountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMasterAccountDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMasterAccountDo
	Group(cols ...field.Expr) IMasterAccountDo
	Having(conds ...gen.Condition) IMasterAccountDo
	Limit(limit int) IMasterAccountDo
	Offset(offset int) IMasterAccountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMasterAccountDo
	Unscoped() IMasterAccountDo
	Create(values ...*model.MasterAccount) error
	CreateInBatches(values []*model.MasterAccount, batchSize int) error
	Save(values ...*model.MasterAccount) error
	First() (*model.MasterAccount, error)
	Take() (*model.MasterAccount, error)
	Last() (*model.MasterAccount, error)
	Find() ([]*model.MasterAccount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MasterAccount, err error)
	FindInBatches(result *[]*model.MasterAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MasterAccount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMasterAccountDo
	Assign(attrs ...field.AssignExpr) IMasterAccountDo
	Joins(fields ...field.RelationField) IMasterAccountDo
	Preload(fields ...field.RelationField) IMasterAccountDo
	FirstOrInit() (*model.MasterAccount, error)
	FirstOrCreate() (*model.MasterAccount, error)
	FindByPage(offset int, limit int) (result []*model.MasterAccount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMasterAccountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m masterAccountDo) Debug() IMasterAccountDo {
	return m.withDO(m.DO.Debug())
}

func (m masterAccountDo) WithContext(ctx context.Context) IMasterAccountDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m masterAccountDo) ReadDB() IMasterAccountDo {
	return m.Clauses(dbresolver.Read)
}

func (m masterAccountDo) WriteDB() IMasterAccountDo {
	return m.Clauses(dbresolver.Write)
}

func (m masterAccountDo) Session(config *gorm.Session) IMasterAccountDo {
	return m.withDO(m.DO.Session(config))
}

func (m masterAccountDo) Clauses(conds ...clause.Expression) IMasterAccountDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m masterAccountDo) Returning(value interface{}, columns ...string) IMasterAccountDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m masterAccountDo) Not(conds ...gen.Condition) IMasterAccountDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m masterAccountDo) Or(conds ...gen.Condition) IMasterAccountDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m masterAccountDo) Select(conds ...field.Expr) IMasterAccountDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m masterAccountDo) Where(conds ...gen.Condition) IMasterAccountDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m masterAccountDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMasterAccountDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m masterAccountDo) Order(conds ...field.Expr) IMasterAccountDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m masterAccountDo) Distinct(cols ...field.Expr) IMasterAccountDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m masterAccountDo) Omit(cols ...field.Expr) IMasterAccountDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m masterAccountDo) Join(table schema.Tabler, on ...field.Expr) IMasterAccountDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m masterAccountDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMasterAccountDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m masterAccountDo) RightJoin(table schema.Tabler, on ...field.Expr) IMasterAccountDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m masterAccountDo) Group(cols ...field.Expr) IMasterAccountDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m masterAccountDo) Having(conds ...gen.Condition) IMasterAccountDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m masterAccountDo) Limit(limit int) IMasterAccountDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m masterAccountDo) Offset(offset int) IMasterAccountDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m masterAccountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMasterAccountDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m masterAccountDo) Unscoped() IMasterAccountDo {
	return m.withDO(m.DO.Unscoped())
}

func (m masterAccountDo) Create(values ...*model.MasterAccount) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m masterAccountDo) CreateInBatches(values []*model.MasterAccount, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m masterAccountDo) Save(values ...*model.MasterAccount) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m masterAccountDo) First() (*model.MasterAccount, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MasterAccount), nil
	}
}

func (m masterAccountDo) Take() (*model.MasterAccount, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MasterAccount), nil
	}
}

func (m masterAccountDo) Last() (*model.MasterAccount, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MasterAccount), nil
	}
}

func (m masterAccountDo) Find() ([]*model.MasterAccount, error) {
	result, err := m.DO.Find()
	return result.([]*model.MasterAccount), err
}

func (m masterAccountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MasterAccount, err error) {
	buf := make([]*model.MasterAccount, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m masterAccountDo) FindInBatches(result *[]*model.MasterAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m masterAccountDo) Attrs(attrs ...field.AssignExpr) IMasterAccountDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m masterAccountDo) Assign(attrs ...field.AssignExpr) IMasterAccountDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m masterAccountDo) Joins(fields ...field.RelationField) IMasterAccountDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m masterAccountDo) Preload(fields ...field.RelationField) IMasterAccountDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m masterAccountDo) FirstOrInit() (*model.MasterAccount, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MasterAccount), nil
	}
}

func (m masterAccountDo) FirstOrCreate() (*model.MasterAccount, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MasterAccount), nil
	}
}

func (m masterAccountDo) FindByPage(offset int, limit int) (result []*model.MasterAccount, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m masterAccountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m masterAccountDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m masterAccountDo) Delete(models ...*model.MasterAccount) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *masterAccountDo) withDO(do gen.Dao) *masterAccountDo {
	m.DO = *do.(*gen.DO)
	return m
}
