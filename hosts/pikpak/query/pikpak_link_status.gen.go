// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/KeepShareOrg/keepshare/hosts/pikpak/model"
)

func newLinkStatus(db *gorm.DB, opts ...gen.DOOption) linkStatus {
	_linkStatus := linkStatus{}

	_linkStatus.linkStatusDo.UseDB(db, opts...)
	_linkStatus.linkStatusDo.UseModel(&model.LinkStatus{})

	tableName := _linkStatus.linkStatusDo.TableName()
	_linkStatus.ALL = field.NewAsterisk(tableName)
	_linkStatus.AutoID = field.NewInt64(tableName, "auto_id")
	_linkStatus.OriginalLinkHash = field.NewString(tableName, "original_link_hash")
	_linkStatus.AccessIPList = field.NewString(tableName, "access_ip_list")
	_linkStatus.CreatedAt = field.NewTime(tableName, "created_at")
	_linkStatus.UpdatedAt = field.NewTime(tableName, "updated_at")

	_linkStatus.fillFieldMap()

	return _linkStatus
}

type linkStatus struct {
	linkStatusDo

	ALL              field.Asterisk
	AutoID           field.Int64
	OriginalLinkHash field.String
	AccessIPList     field.String
	CreatedAt        field.Time
	UpdatedAt        field.Time

	fieldMap map[string]field.Expr
}

func (l linkStatus) Table(newTableName string) *linkStatus {
	l.linkStatusDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l linkStatus) As(alias string) *linkStatus {
	l.linkStatusDo.DO = *(l.linkStatusDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *linkStatus) updateTableName(table string) *linkStatus {
	l.ALL = field.NewAsterisk(table)
	l.AutoID = field.NewInt64(table, "auto_id")
	l.OriginalLinkHash = field.NewString(table, "original_link_hash")
	l.AccessIPList = field.NewString(table, "access_ip_list")
	l.CreatedAt = field.NewTime(table, "created_at")
	l.UpdatedAt = field.NewTime(table, "updated_at")

	l.fillFieldMap()

	return l
}

func (l *linkStatus) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *linkStatus) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 5)
	l.fieldMap["auto_id"] = l.AutoID
	l.fieldMap["original_link_hash"] = l.OriginalLinkHash
	l.fieldMap["access_ip_list"] = l.AccessIPList
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
}

func (l linkStatus) clone(db *gorm.DB) linkStatus {
	l.linkStatusDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l linkStatus) replaceDB(db *gorm.DB) linkStatus {
	l.linkStatusDo.ReplaceDB(db)
	return l
}

type linkStatusDo struct{ gen.DO }

type ILinkStatusDo interface {
	gen.SubQuery
	Debug() ILinkStatusDo
	WithContext(ctx context.Context) ILinkStatusDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILinkStatusDo
	WriteDB() ILinkStatusDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILinkStatusDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILinkStatusDo
	Not(conds ...gen.Condition) ILinkStatusDo
	Or(conds ...gen.Condition) ILinkStatusDo
	Select(conds ...field.Expr) ILinkStatusDo
	Where(conds ...gen.Condition) ILinkStatusDo
	Order(conds ...field.Expr) ILinkStatusDo
	Distinct(cols ...field.Expr) ILinkStatusDo
	Omit(cols ...field.Expr) ILinkStatusDo
	Join(table schema.Tabler, on ...field.Expr) ILinkStatusDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILinkStatusDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILinkStatusDo
	Group(cols ...field.Expr) ILinkStatusDo
	Having(conds ...gen.Condition) ILinkStatusDo
	Limit(limit int) ILinkStatusDo
	Offset(offset int) ILinkStatusDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILinkStatusDo
	Unscoped() ILinkStatusDo
	Create(values ...*model.LinkStatus) error
	CreateInBatches(values []*model.LinkStatus, batchSize int) error
	Save(values ...*model.LinkStatus) error
	First() (*model.LinkStatus, error)
	Take() (*model.LinkStatus, error)
	Last() (*model.LinkStatus, error)
	Find() ([]*model.LinkStatus, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LinkStatus, err error)
	FindInBatches(result *[]*model.LinkStatus, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LinkStatus) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILinkStatusDo
	Assign(attrs ...field.AssignExpr) ILinkStatusDo
	Joins(fields ...field.RelationField) ILinkStatusDo
	Preload(fields ...field.RelationField) ILinkStatusDo
	FirstOrInit() (*model.LinkStatus, error)
	FirstOrCreate() (*model.LinkStatus, error)
	FindByPage(offset int, limit int) (result []*model.LinkStatus, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILinkStatusDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l linkStatusDo) Debug() ILinkStatusDo {
	return l.withDO(l.DO.Debug())
}

func (l linkStatusDo) WithContext(ctx context.Context) ILinkStatusDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l linkStatusDo) ReadDB() ILinkStatusDo {
	return l.Clauses(dbresolver.Read)
}

func (l linkStatusDo) WriteDB() ILinkStatusDo {
	return l.Clauses(dbresolver.Write)
}

func (l linkStatusDo) Session(config *gorm.Session) ILinkStatusDo {
	return l.withDO(l.DO.Session(config))
}

func (l linkStatusDo) Clauses(conds ...clause.Expression) ILinkStatusDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l linkStatusDo) Returning(value interface{}, columns ...string) ILinkStatusDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l linkStatusDo) Not(conds ...gen.Condition) ILinkStatusDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l linkStatusDo) Or(conds ...gen.Condition) ILinkStatusDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l linkStatusDo) Select(conds ...field.Expr) ILinkStatusDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l linkStatusDo) Where(conds ...gen.Condition) ILinkStatusDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l linkStatusDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILinkStatusDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l linkStatusDo) Order(conds ...field.Expr) ILinkStatusDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l linkStatusDo) Distinct(cols ...field.Expr) ILinkStatusDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l linkStatusDo) Omit(cols ...field.Expr) ILinkStatusDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l linkStatusDo) Join(table schema.Tabler, on ...field.Expr) ILinkStatusDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l linkStatusDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILinkStatusDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l linkStatusDo) RightJoin(table schema.Tabler, on ...field.Expr) ILinkStatusDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l linkStatusDo) Group(cols ...field.Expr) ILinkStatusDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l linkStatusDo) Having(conds ...gen.Condition) ILinkStatusDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l linkStatusDo) Limit(limit int) ILinkStatusDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l linkStatusDo) Offset(offset int) ILinkStatusDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l linkStatusDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILinkStatusDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l linkStatusDo) Unscoped() ILinkStatusDo {
	return l.withDO(l.DO.Unscoped())
}

func (l linkStatusDo) Create(values ...*model.LinkStatus) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l linkStatusDo) CreateInBatches(values []*model.LinkStatus, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l linkStatusDo) Save(values ...*model.LinkStatus) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l linkStatusDo) First() (*model.LinkStatus, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LinkStatus), nil
	}
}

func (l linkStatusDo) Take() (*model.LinkStatus, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LinkStatus), nil
	}
}

func (l linkStatusDo) Last() (*model.LinkStatus, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LinkStatus), nil
	}
}

func (l linkStatusDo) Find() ([]*model.LinkStatus, error) {
	result, err := l.DO.Find()
	return result.([]*model.LinkStatus), err
}

func (l linkStatusDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LinkStatus, err error) {
	buf := make([]*model.LinkStatus, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l linkStatusDo) FindInBatches(result *[]*model.LinkStatus, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l linkStatusDo) Attrs(attrs ...field.AssignExpr) ILinkStatusDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l linkStatusDo) Assign(attrs ...field.AssignExpr) ILinkStatusDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l linkStatusDo) Joins(fields ...field.RelationField) ILinkStatusDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l linkStatusDo) Preload(fields ...field.RelationField) ILinkStatusDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l linkStatusDo) FirstOrInit() (*model.LinkStatus, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LinkStatus), nil
	}
}

func (l linkStatusDo) FirstOrCreate() (*model.LinkStatus, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LinkStatus), nil
	}
}

func (l linkStatusDo) FindByPage(offset int, limit int) (result []*model.LinkStatus, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l linkStatusDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l linkStatusDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l linkStatusDo) Delete(models ...*model.LinkStatus) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *linkStatusDo) withDO(do gen.Dao) *linkStatusDo {
	l.DO = *do.(*gen.DO)
	return l
}
